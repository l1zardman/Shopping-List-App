

@page "/ShoppingListsViewer"
@using ShoppingListApp.Client.Services

<PageTitle>ShoppingListsViewer</PageTitle>

<div class="text-center">
    <h3>Your Shopping Lists</h3>

    @if (ShoppingLists is null) {
        <p>Loading...</p>
    }
    else if (!ShoppingLists.Any()) {
        <p>No shopping lists available. Please create one!</p>
    }
    else {
        <ul id="shopping-lists-list" class="list-group">

            @foreach (var list in ShoppingLists) {
                <li id="shopping-lists-element" class="list-group-item">
                    <div class="d-flex justify-content-between align-items-center">
                        <span id="shopping-list-name-date">@list.Name - @list.Date.ToString()</span>

                        <div>
                            @* TODO : connect to api point that deletes list *@
                            <button id="done-btn" class="btn btn-success btn-sm me-2" @onclick="() => DeleteList(list)">Done</button>

                            <button id="view-details-btn" class="btn btn-primary btn-sm"
                                    @onclick="() => ShowListDetails(list.ShoppingListId)">
                                Details
                            </button>

                        </div>

                    </div>
                </li>
            }

        </ul>
    }

    @if (_clicked && SelectedShoppingList != null) {
        <div id="details-view-div" class="mt-3">
            @if (SelectedShoppingList.Products == null || !SelectedShoppingList.Products.Any()) {
                <p>No products available in this shopping list.</p>
            }

            <ul id="shopping-list-details" class="list-group">
                @foreach (var product in SelectedShoppingList?.Products ?? Enumerable.Empty<Product>()) {
                    <li id="shopping-list-details-row" class="list-group-item d-flex justify-content-between align-items-center">

                        <span style="@(product.IsComplete ? "text-decoration: line-through;" : "")">
                            - @product.Name - Amount: @product.Amount - Weight: @product.Weight kg
                        </span>

                        <input type="checkbox" class="form-check-input"
                               checked="@product.IsComplete"
                               @onchange="() => UpdateProduct(product)"/>
                    </li>
                }
            </ul>

            <button class="btn btn-secondary btn-sm mt-3" @onclick="CloseDetails">Close</button>
        </div>
    }
</div>


@code {
    public List<ShoppingList>? ShoppingLists { get; set; }
    public ShoppingList? SelectedShoppingList;
    public bool _clicked = false;

    [Inject]
    public HttpClient Http { get; set; }
    [Inject]
    public IProductService ProductService { get; set; }
    [Inject]
    public IShoppingListService ShoppingListService { get; set; }

    protected override async Task OnInitializedAsync() {
        // Fetch the dummy shopping lists
        // _shoppingLists = SomeTestingData.ShoppingListsStubs;
        try {
            // Fetch shopping lists from the API
            ShoppingLists = await ShoppingListService.GetAllShoppingLists();
        }
        catch (Exception ex) {
            Console.WriteLine($"Error fetching shopping lists: {ex.Message}");
            ShoppingLists = new List<ShoppingList>(); // Set to empty list to avoid null issues
        }
    }

    public void ShowListDetails(long listId) {
        // Find the selected shopping list based on the Id
        SelectedShoppingList = ShoppingLists?.FirstOrDefault(list => list.ShoppingListId == listId);
        _clicked = true;
    }

    public void CloseDetails() {
        _clicked = false;
    }

    public async Task UpdateProduct(Product product) {
        product.IsComplete = !product.IsComplete;
        await ProductService.UpdateProduct(product);
    }


    public async Task DeleteList(ShoppingList list) {
        ShoppingLists.Remove(list);
        _clicked = false;
        await ShoppingListService.DeleteShoppingList(list.ShoppingListId.ToString());
    }
}