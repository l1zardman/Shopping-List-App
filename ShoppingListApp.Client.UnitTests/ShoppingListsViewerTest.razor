@inherits TestContext
@using FluentAssertions
@using Bunit;
@using Xunit;
@using Moq
@using ShoppingListApp.Client.Pages
@using ShoppingListApp.Client.Services
@using ShoppingListApp.Models


@code {
    
    [Fact]
    public void OnInitializedAsync_InvalidCall_ShoppingListsIsNull_DisplaysLoadingMessage() {

        List<ShoppingList>? l = null;
        
        // Arrange
        var productServiceMock = new Mock<IProductService>();
        var shoppingListServiceMock = new Mock<IShoppingListService>();
        shoppingListServiceMock.Setup(s => s.GetAllShoppingLists()).ReturnsAsync(l);
        
        Services.AddSingleton(shoppingListServiceMock.Object);
        Services.AddSingleton(productServiceMock.Object);
        
        var component = RenderComponent<ShoppingListsViewer>();
        
        // Act
        // No explicit action, as the component initializes in a loading state.
    
        // Assert
        component.Find("p").TextContent.Should().Be("Loading...");
    }

    [Fact]
    public void OnInitializedAsync_InvalidCall_ShoppingListsIsEmpty_DisplaysInformationMessage() {
        List<ShoppingList> l = new();
        
        // Arrange
        var productServiceMock = new Mock<IProductService>();
        var shoppingListServiceMock = new Mock<IShoppingListService>();
        shoppingListServiceMock.Setup(s => s.GetAllShoppingLists()).ReturnsAsync(l);
        
        Services.AddSingleton(shoppingListServiceMock.Object);
        Services.AddSingleton(productServiceMock.Object);
        
        var component = RenderComponent<ShoppingListsViewer>();

    
        Assert.Contains("No shopping lists available. Please create one!", component.Markup);
    }

    [Fact]
    public async Task OnInitializedAsync_ValidServiceCall_PopulatesShoppingLists()
    {
        // Arrange
        var shoppingLists = new List<ShoppingList>
        {
            new ShoppingList { ShoppingListId = 1, Name = "Groceries", Date = DateOnly.Parse("2024/11/28") },
            new ShoppingList { ShoppingListId = 2, Name = "Party Supplies", Date =DateOnly.Parse("2024/11/28") }
        };

        var productServiceMock = new Mock<IProductService>();
        
        var shoppingListServiceMock = new Mock<IShoppingListService>();
        shoppingListServiceMock.Setup(s => s.GetAllShoppingLists()).ReturnsAsync(shoppingLists);

        Services.AddSingleton(shoppingListServiceMock.Object);
        Services.AddSingleton(productServiceMock.Object);

        // Act
        var component = RenderComponent<ShoppingListsViewer>(); 
        component.WaitForState(() => component.Instance.ShoppingLists != null);

        // Assert
        Assert.Equal(2, component.Instance.ShoppingLists.Count);
        Assert.Contains("Groceries", component.Markup);
        Assert.Contains("Party Supplies", component.Markup);
    }


    [Fact]
    public void ShowListDetails_ValidListId_ShowsSelectedDetails()
    {
        // Arrange
        var shoppingLists = new List<ShoppingList>
        {
            new ShoppingList
            {
                ShoppingListId = 1,
                Name = "Groceries",
                Date = DateOnly.Parse("2024/11/28"),
                Products = new List<Product>
                {
                    new Product { ProductId = 1, Name = "Apples", Amount = 2, Weight = 1.5m, IsComplete = false }
                }
            }
        };
        
        var productServiceMock = new Mock<IProductService>();
        var shoppingListServiceMock = new Mock<IShoppingListService>();

        shoppingListServiceMock.Setup(s => s.GetAllShoppingLists()).ReturnsAsync(shoppingLists);
        
        Services.AddSingleton(shoppingListServiceMock.Object);
        Services.AddSingleton(productServiceMock.Object);
        
        var component = RenderComponent<ShoppingListsViewer>();

        // Act
        component.Find("#view-details-btn").Click();

        // Assert
        Assert.True(component.Instance._clicked);
        Assert.Contains("Apples", component.Markup);
    }

    
    [Fact]
    public async Task UpdateProduct_ValidUpdate_UpdatesProductState()
    {
        // Arrange
        var shoppingLists = new List<ShoppingList>
        {
            new ShoppingList
            {
                ShoppingListId = 1,
                Name = "Groceries",
                Date = DateOnly.Parse("2024/11/28"),
                Products = new List<Product>
                {
                    new Product { ProductId = 1, Name = "Apples", Amount = 2, Weight = 1.5m, IsComplete = false }
                }
            }
        };

        var productServiceMock = new Mock<IProductService>();
        var shoppingListServiceMock = new Mock<IShoppingListService>();
        
        shoppingListServiceMock.Setup(s => s.GetAllShoppingLists()).ReturnsAsync(shoppingLists);
        productServiceMock.Setup(s => s.UpdateProduct(It.IsAny<Product>())).Returns(Task.CompletedTask);

        Services.AddSingleton(productServiceMock.Object);
        Services.AddSingleton(shoppingListServiceMock.Object);

        var component = RenderComponent<ShoppingListsViewer>();

        // Act
        component.Find("#view-details-btn").Click();
        var checkbox = component.Find("input[type='checkbox']");
        checkbox.Change(true);

        // Assert
        Assert.True(component.Instance.SelectedShoppingList.Products[0].IsComplete);
        productServiceMock.Verify(s => s.UpdateProduct(It.IsAny<Product>()), Times.Once);
    }

    [Fact]
    public async Task DeleteList_ValidList_RemovesListFromDisplay()
    {
        // Arrange
        var shoppingLists = new List<ShoppingList>
        {
            new ShoppingList { ShoppingListId = 1, Name = "Groceries", Date = DateOnly.Parse("2024/11/28") },
            new ShoppingList { ShoppingListId = 2, Name = "Party Supplies", Date = DateOnly.Parse("2024/11/28") }
        };

        var shoppingListServiceMock = new Mock<IShoppingListService>();
        var productServiceMock = new Mock<IProductService>();
        
        shoppingListServiceMock.Setup(s => s.GetAllShoppingLists()).ReturnsAsync(shoppingLists);
        shoppingListServiceMock.Setup(s => s.DeleteShoppingList(It.IsAny<string>())).Returns(Task.CompletedTask);

        Services.AddSingleton(shoppingListServiceMock.Object);
        Services.AddSingleton(productServiceMock.Object);

        var component = RenderComponent<ShoppingListsViewer>();

        // Act
        var deleteButton = component.FindAll("button:contains('Done')")[0];
        deleteButton.Click();

        // Assert
        Assert.DoesNotContain("Groceries", component.Markup);
        Assert.Single(component.Instance.ShoppingLists);
    }

}
