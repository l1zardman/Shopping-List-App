@page "/ShoppingListsViewer"

<PageTitle>ShoppingListsViewer</PageTitle>

<div class="text-center">
    <h3>Your Shopping Lists</h3>

    @if (_shoppingLists is null) {
        <p>Loading...</p>
    }
    else if (!_shoppingLists.Any()) {
        <p>No shopping lists available. Please create one!</p>
    }
    else {
        <ul class="list-group">

            @foreach (var list in _shoppingLists) {
                <li class="list-group-item">
                    <div class="d-flex justify-content-between align-items-center">
                        <span>@list.Name - @list.Date.ToString()</span>

                        <div>

                            <button class="btn btn-success btn-sm me-2" @onclick="() => { }">Done</button>

                            <button class="btn btn-primary btn-sm"
                                    @onclick="() => ShowListDetails(list.ShoppingListId)">
                                Details
                            </button>

                        </div>

                    </div>
                </li>
            }

        </ul>
    }

    @if (_clicked && SelectedShoppingList != null) {
        <div class="mt-3">
            @if (SelectedShoppingList.Products == null || !SelectedShoppingList.Products.Any()) {
                <p>No products available in this shopping list.</p>
            }

            <ul class="list-group">
                @foreach (var product in SelectedShoppingList?.Products ?? Enumerable.Empty<Product>()) {
                    <li class="list-group-item d-flex justify-content-between align-items-center">

                        <span style="@(product.IsComplete ? "text-decoration: line-through;" : "")">
                            - @product.Name - Amount: @product.Amount - Weight: @product.Weight kg
                        </span>

                        <input type="checkbox" class="form-check-input" @bind="product.IsComplete"/>
                    </li>
                }
            </ul>

            <button class="btn btn-secondary btn-sm mt-3" @onclick="CloseDetails">Close</button>
        </div>
    }
</div>


@code {
    private List<ShoppingList>? _shoppingLists;
    public ShoppingList? SelectedShoppingList;
    private bool _clicked = false;

    [Inject]
    private HttpClient Http { get; set; }

    protected override async Task OnInitializedAsync() {
        // Fetch the dummy shopping lists
        // _shoppingLists = SomeTestingData.ShoppingListsStubs;
        try {
            // Fetch shopping lists from the API
            _shoppingLists = await Http.GetFromJsonAsync<List<ShoppingList>>("api/ShoppingList");
        }
        catch (Exception ex) {
            Console.WriteLine($"Error fetching shopping lists: {ex.Message}");
            _shoppingLists = new List<ShoppingList>(); // Set to empty list to avoid null issues
        }
    }

    private void ShowListDetails(long listId) {
        // Find the selected shopping list based on the Id
        SelectedShoppingList = _shoppingLists?.FirstOrDefault(list => list.ShoppingListId == listId);
        _clicked = true;
    }

    private void CloseDetails() {
        _clicked = false;
    }

}